s17day19
要求：
	- 作业
	- 开始自己做小项目（结组）
	
内容回顾：
	- Http请求本质
		浏览器（socket客户端）：
			2. socket.connect(ip,端口)
			3. socket.send("http://www.xiaohuar.com/index.html....")
			   规则：http协议
				     GET请求：
						"GET /index.html?k1=1&k2=2 Http/1.1\r\nhost:www.xiaohuar.com\r\ncontent-type:application/json\r\n\r\n"
					 
						请求头和请求体使用\r\n\r\n分割，前面头，后面是体
					 POST请求：
						"POST /index.html?k1=1&k2=2 Http/1.1\r\nhost:www.xiaohuar.com\r\ncontent-type:application/json\r\n\r\nusername=alex&pwd=123123"
					 
						请求头和请求体使用\r\n\r\n分割，前面头，后面是体
						
					www.xiaohuar.com/index.html?k1=1&k2=2
			6. 获取相应
				响应头,响应体 = data.split('\r\n\r\n')
				
			7. 断开连接
		网站（socket服务端）：
			1. 服务端运行： ip,端口
			4. 字符串 = server.recv()
			
				头,体 = data.split("\r\n\r\n=")
				
				request.POST.get()
				
			5. 服务端响应：
				conn.send('......')
				
				响应头：
				
				响应体：
					
			7. 断开连接
			
		总结：
		
			a. Http请求中本质都是字符串
			b. Http请求短连接（请求，响应断开连接）
			c. 请求和响应都有：头、体
				请求：
					请求头
					\r\n\r\n
					请求体
				响应：
					响应头
					\r\n\r\n
					响应体
						<html>
							....
						</html>
				
			
	- Web框架
		Django本质：
			socket（wsgiref）
			解析和封装http请求（*）
			
		使用Django：
			a. 安装
			b. 
				projcet
					django-admin startproject mysite
				app
					cd mysite
					python manage.py startapp app01
					
				写代码(****)
				
				python manage.py runserver ip:port
				
				
	- 写代码
				
		- 路由系统 URL
			/login/        -> funcname    name='f1'
			/login/\d+/    -> funcname    name='f1'
			/login/(?P<n>\d+)/    -> funcname    name='f1'
			/login/\d+/    -> include('app01.urls')
			
		- 视图函数
		
			def index(request):
				request.GET
				request.body # 原生的请求体
				request.POST # 如果请求头中： content-type: urlencode-form。。。。，才将request.body转换称字典
					- 可能有
					- 可能没有
				request.method
				request.Meta
				
				request.GET.get()
				request.GET.getlist() # checbox,select
				request.POST.get()
				request.POST.getlist()
				
				
				return HttpResponse('字符串/字节')
				return render(request,"html路径",{})
				return redirect('URL')# location: www.baidu.com
		
		
		- 模板
		
			- 继承
			- 模板语言
				for
				if
			- filter,sample_tag
			
		- Models操作
			- 创建表： 业务线
			
			- models.xx.objects.create(name='欧美')
			- models.xx.objects.create(**dic)
			
			- models.xx.objects.filter(id__gt=1).delete()
			- models.xx.objects.filter(id=1).delete()
			- models.xx.objects.exclude(id=1).delete()
			
			- models.xx.objects.filter(id=1).update(name='ddd')
			- models.xx.objects.filter(id=1).update(**dic)
			
			- 创建表： 
				业务线
				主机表
					id host port bs
					
			# queryset = [对象,对象,...]
			- objs = models.xx.objects.all()
			  for row in objs:
				row.id
				row.host
				row.port
				row.bs.name
				
			# queryset = [{},{},...]
			- objs = models.xx.objects.all().values('id','host','port','bs__name')
			  for row in objs:
				row['id']
				row['bs__name']
				
			# queryset = [(1,1.1.11,80,'Web'),(),()...]
			- objs = models.xx.objects.all().values_list('id','host','port','bs__name')
			  for row in objs:
				row[0]
				row[1]
					
			
			- 创建表： 
				用户表(id, user,pwd,email,mm)
				业务线(id, name) # 用户表_set
				主机表(id host port bs)
				用户业务线关系表(id  uid  bid)   ******
							      1   22    1
							      2   22    11
			-   obj = modes.userinfo.objects.filter(user='日语哥').first()
				obj.mm.add(1)
				obj.mm.add(11)
				# 日语哥负责的所有业务线 -> [业务线对象,业务线对象,]
				queryset = obj.mm.all() 
				for row in queryset:
					row.id
					row.name
				
				
			- 二手车业务线是由那些人负责
				obj = models.business_unit.objects.filter(name='二手车').first()
				queryset = obj.userinfo_set.all() #[用户对象，用户对象,]
				for row in queryset:
					row.user
					row.pwd
			
今日内容：
		
	1. 登录
		- 密码，加密
		- 用户登录之后，才能访问某些页面
		
	2.cookie是什么？
			- 保存在客户端浏览器上的键值对   {k:v}
			- cookie依附在请求头或响应头中出现
			- 发送请求时，会自动携带自己网站的cookie
		- 应用：
			- 实现登录
			- 投票
			
		- 使用：
			- 设置：
				response = redirect('/index.html')
				response.set_cookie('uuuuuuuuu',user)
				return response 
				
				key, 				
				value='', 
				max_age=None, 		# 超时时间
				expires=None, 		# 超时时间
				path='/',			# 访问指定url时，才能读取到cookie
                domain=None, 		# 当前域名或二级域名
				secure=False, 		# https
				httponly=False		# 
				   
			- 获取：
				ck = request.COOKIES.get('uuuuuuuuu')
		
	3.session
		session是什么？
			保存在服务端的键值对
		PS: 依赖cookie
		
	4.CSRF，跨站请求伪造
		正常：
			a. 先GET请求：
				页面
				隐藏：input 随机字符串
			b. POST
				数据
				input 随机字符串
		非法：
			b. POST
				数据
		
		使用：
		
			Form提交：
				<form action="/icbc.html" method="POST">
					{% csrf_token %}
					<input type='text' name='from'  />
					<input type='text' name='to' />
					<input type='text'  name='money' />
					<input type='submit' value='转账' />
				</form>
				
			Ajax提交：
				基于请求体：
					function ajaxSubmit() {
						$.ajax({
							url: "/icbc.html",
							type: 'POST',
							data: {'k1':'v1','k2':'v2','csrfmiddlewaretoken':$('input[name="csrfmiddlewaretoken"]').val() },
							success:function (arg) {
								console.log(arg)
							}
						})
					}
					
					// 只能写在模板中
					function ajaxSubmit() {
						$.ajax({
							url: "/icbc.html",
							type: 'POST',
							data: {'k1':'v1','k2':'v2','csrfmiddlewaretoken':"{{ csrf_token }}" },
							success:function (arg) {
								console.log(arg)
							}
						})
					}
					
					function ajaxSubmit() {
						$.ajax({
							url: "/icbc.html",
							type: 'POST',
							data: $('#f1').serialize(),
							success:function (arg) {
								console.log(arg)
							}
						})
					}
					// 以上都是放在请求体中
				
				基于请求头：
					a. 在cookie中获取csrftoken对应的值 l2kEqQLhR1gH0hh3ioZ1dfxT3iSwjXoKTf7GNFggJZ7E6DROB6k33L7vdqe5lV1v
					b. 发送请求时，放在请求头中也可以
					
					function ajaxSubmit() {
						$.ajax({
							url: "/icbc.html",
							type: 'POST',
							data: {'k1':'v1','k2':'v2'},
							headers: {"X-CSRFToken": $.cookie('csrftoken')},
							success:function (arg) {
								console.log(arg)
							}
						})
					}
				
	5. 牛逼自定义分页
	
		
作业：主机管理

	用户表(id, user,pwd,email,mm)
	业务线(id, name) # 用户表_set
	主机表(id host port FK(业务线))
	用户业务线关系表(id  uid  bid)   ******
	
					
	1. 登录（Ajax POST，密码加密）
	2. 用户登录基于Session
	3. 装饰器
	4. 主机列表
			host  port  <a>业务线名称</a>
			host  port  业务线名称
			host  port  业务线名称
			host  port  业务线名称
			host  port  业务线名称
			
			分页
			
			PS: 模态对话框编辑
	5. 新页面： 当前业务线所有的管理员列表
			
		
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				
				
	
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			
			
			
			
			
			
			
			
			
			
			